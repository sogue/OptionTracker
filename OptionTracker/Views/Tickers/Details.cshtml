@model API.Helpers.Pagination<ChainResultViewModel>

@{
    ViewData["Title"] = @Model.Data.FirstOrDefault()?.Ticker;
}

<div>
    <div>
        <dl class="row">
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Data.FirstOrDefault().Ticker)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.Data.FirstOrDefault().Ticker)
                <a asp-controller="DateChains"
                   asp-action="@Model.Data.FirstOrDefault()?.Ticker">
                    Date Chains
                </a>
                <a asp-controller="Tickers"
                   asp-action="Details"
                   asp-route-id="update">
                    Update Contracts
                </a>
            </dd>
            <dd>
                <a asp-controller="DateChains"
                   asp-action="@Model.Data.FirstOrDefault()?.Ticker">
                    Option Chains
                </a> |
                <a asp-action="Details" asp-route-id="@Model.Data.FirstOrDefault()?.Ticker">Most Active Options</a>
                | <a asp-controller="VolumeAnals" asp-action="Details" asp-route-id="@Model.Data.FirstOrDefault()?.Ticker">Daily Option Volume</a>
            </dd>
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Data.FirstOrDefault().MarketCap)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.Data.FirstOrDefault().MarketCap)
            </dd>
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Data.FirstOrDefault().ClosePrice)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.Data.FirstOrDefault().ClosePrice)
            </dd>
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Data.FirstOrDefault().Created)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.Data.FirstOrDefault().Created)

                @Html.DisplayFor(model => model.Data.FirstOrDefault().TimeChange)
                
            </dd>
            <dd>
                <form class="d-inline-flex" asp-action="Details" method="get">
                    <div class="input-group-sm">
                        <div>
                            <p>Go to: </p>
                              
                                <input type="hidden" name="PageIndex" value="@Model.PageIndex" />
                                <input type="hidden" name="PageSize" value="@Model.PageSize" />
                                <input type="hidden" name="TypeId" value=@ViewData["Type"] />
                                <input type="hidden" name="Sort" value="@ViewData["Sort"]" />
                                <input type="number" name="BrandId" value="@ViewData["Brand"]" />
                                <input type="submit" class="btn" value="Days Ago" />
                            </div>
                        </div>
                </form>
            </dd>
            <dd>
                <form class="d-inline-flex" asp-action="Details" method="get">
                    <div class="input-group-sm">
                        <div>
                            <input type="hidden" name="PageIndex" value="@Model.PageIndex" />
                            <input type="hidden" name="PageSize" value="@Model.PageSize" />
                            <input type="hidden" name="TypeId" value=@ViewData["Type"] />
                            <input type="hidden" name="Sort" value="@ViewData["Sort"]" />
                            <input type="hidden" name="BrandId" value=@ViewData["Brand"] />
                            <input type="hidden" name="Search" value="threeD" />
                            <input type="submit" class="btn" value="Last Three" />
                        </div>
                    </div>
                </form>
                <form class="d-inline-flex" asp-action="Details" method="get">
                    <div class="input-group-sm">
                        <div>
                            <input type="hidden" name="PageIndex" value="@Model.PageIndex" />
                            <input type="hidden" name="PageSize" value="@Model.PageSize" />
                            <input type="hidden" name="TypeId" value=@ViewData["Type"] />
                            <input type="hidden" name="BrandId" value=@ViewData["Brand"] />
                            <input type="hidden" name="Sort" value="@ViewData["Sort"]" />
                            <input type="hidden" name="Search" value="dWeek" />
                            <input type="submit" class="btn" value="Last Seven" />
                        </div>
                    </div>
                </form>
            </dd>
        </dl>
        <table class="table">
            <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.Data.FirstOrDefault().OptionsResults.FirstOrDefault().Description)

                    <form asp-action="Details" method="get">
                        <input type="hidden" name="PageIndex" value="@Model.PageIndex"/>
                        <input type="hidden" name="PageSize" value="@Model.PageSize"/>
                        <input type="hidden" name="TypeId" value="1"/>
                        <input type="hidden" name="Sort" value=@ViewData["Sort"]/>
                        <input type="hidden" name="BrandId" value=@ViewData["Brand"]/>
                        <input type="submit" class="btn" value="ShowPuts"/>
                    </form>

                </th>
                <th>
                    <form asp-action="Details" method="get">
                        <input type="hidden" name="PageIndex" value="@Model.PageIndex"/>
                        <input type="hidden" name="PageSize" value="@Model.PageSize"/>
                        <input type="hidden" name="TypeId" value=@ViewData["Type"]/>
                        <input type="hidden" name="BrandId" value=@ViewData["Brand"]/>
                        <input type="hidden" name="Sort" value="cpDesc"/>
                        <input type="submit" class="btn" value=  @Html.DisplayNameFor(model => model.Data.FirstOrDefault().OptionsResults.FirstOrDefault().ClosePrice)/>
                    </form>
                    <form asp-action="Details" method="get">
                        <input type="hidden" name="PageIndex" value="@Model.PageIndex"/>
                        <input type="hidden" name="PageSize" value="@Model.PageSize"/>
                        <input type="hidden" name="TypeId" value=@ViewData["Type"]/>
                        <input type="hidden" name="BrandId" value=@ViewData["Brand"]/>
                        <input type="hidden" name="Sort" value="cpcDesc"/>
                        <input type="submit" class="btn" value="(By Change)"/>
                    </form>
                </th>
                <th>

                    <form asp-action="Details" method="get">
                        <input type="hidden" name="PageIndex" value="@Model.PageIndex"/>
                        <input type="hidden" name="PageSize" value="@Model.PageSize"/>
                        <input type="hidden" name="TypeId" value=@ViewData["Type"]/>
                        <input type="hidden" name="BrandId" value=@ViewData["Brand"]/>
                        <input type="hidden" name="Sort" value="oiDesc"/>
                        <input type="submit" class="btn" value=@Html.DisplayNameFor(model => model.Data.FirstOrDefault().OptionsResults.FirstOrDefault().OpenInterest)/>
                    </form>
                 <form class="flex-column" asp-action="Details" method="get">
                        <input type="hidden" name="PageIndex" value="@Model.PageIndex"/>
                        <input type="hidden" name="PageSize" value="@Model.PageSize"/>
                        <input type="hidden" name="TypeId" value=@ViewData["Type"]/>
                        <input type="hidden" name="BrandId" value=@ViewData["Brand"]/>
                        <input type="hidden" name="Sort" value="oicDesc"/>
                        <input type="submit" class="btn" value="(By Change)"  />
                 </form>
                </th>
                <th>

                    <form asp-action="Details" method="get">
                        <input type="hidden" name="PageIndex" value="@Model.PageIndex"/>
                        <input type="hidden" name="PageSize" value="@Model.PageSize"/>
                        <input type="hidden" name="TypeId" value=@ViewData["Type"]/>
                        <input type="hidden" name="BrandId" value=@ViewData["Brand"]/>
                        <input type="hidden" name="Sort" value="volumeDesc"/>
                        <input type="submit" class="btn" value=@Html.DisplayNameFor(model => model.Data.FirstOrDefault().OptionsResults.FirstOrDefault().Volume) />
                    </form>
                </th>
                <th>

                    <form asp-action="Details" method="get">
                        <input type="hidden" name="PageIndex" value="@Model.PageIndex"/>
                        <input type="hidden" name="PageSize" value="@Model.PageSize"/>
                        <input type="hidden" name="TypeId" value=@ViewData["Type"]/>
                        <input type="hidden" name="BrandId" value=@ViewData["Brand"]/>
                        <input type="hidden" name="Sort" value="valueDesc"/>
                        <input type="submit" class="btn" value=@Html.DisplayNameFor(model => model.Data.FirstOrDefault().OptionsResults.FirstOrDefault().TotalValue) />
                    </form>
                </th>
                <th></th>
            </tr>
            </thead>
            <tbody>
            @foreach (var item in Model.Data.FirstOrDefault()?.OptionsResults)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.Description)
                        @Html.DisplayFor(modelItem => item.ChartCode)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.ClosePrice)
                        <span>(@Html.DisplayFor(modelItem => item.ClosePriceChange))</span>
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.OpenInterest)
                        <span>(@Html.DisplayFor(modelItem => item.OpenInterestChange))</span>
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Volume)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.TotalValue)
                    </td>
                    <td>
                        <a asp-action="Edit" asp-route-id="@item.Symbol">Details</a>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>
</div>

<div>
    <div id="donut-chart" class=""></div>
</div>

@section scripts{
    <script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
    <script>
        var donutChart;
        var donut;
        $(document).ready(function() {
            GetData();
        });

        function GetData() {
            $.ajax({
                url: '/Tickers/GetChartData/@Model.Data.FirstOrDefault()?.Ticker',
                cache: false,
                type: "POST",
                success: function(data) {
                    //console.log(data);
                    if (data.success) {
                        if (data.series.length > 0) {
                            LoadChart(data.series, data.labels);
                        } else {
                        }
                    } else {
                        alert(data.message);
                    }
                },
                error: function(reponse) {
                    console.log(reponse);
                    alert("error : " + reponse);
                }
            });
        }

        function LoadChart(series, labels) {
            // Donut Chart
            donutChart = {
                chart: {
                    height: 300,
                    type: 'donut',
                    toolbar: {
                        show: false,
                    }
                },
                series: series,
                labels: labels,
                legend: {
                    fontSize: '20px'
                },
                responsive: [
                    {
                        breakpoint: 480,
                        options: {
                            chart: {
                                width: 305
                            },
                            legend: {
                                position: 'bottom'
                            }
                        }
                    }
                ]
            }
            donut = new ApexCharts(
                document.querySelector("#donut-chart"),
                donutChart
            );
            donut.render();
        }
    </script>
}