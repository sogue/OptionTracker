// <auto-generated />
using System;
using System.Text.Json;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OptionTracker.Data;

namespace OptionTracker.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210619194545_Init6")]
    partial class Init6
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Core.Entities.Legacy.Ticker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AssetType")
                        .HasColumnType("text");

                    b.Property<decimal>("ClosePrice")
                        .HasColumnType("numeric");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("LastOptionVolume")
                        .HasColumnType("integer");

                    b.Property<int>("MarketCap")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("NextEarnings")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("OptionVolumeChange")
                        .HasColumnType("numeric");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Tickers");
                });

            modelBuilder.Entity("Core.Entities.TickerSector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TickerSector");
                });

            modelBuilder.Entity("Core.Entities.TickerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TickerType");
                });

            modelBuilder.Entity("FlowService.Models.Anal.OptionActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("ActivityDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("AssetType")
                        .HasColumnType("text");

                    b.Property<decimal>("CallPutRatio")
                        .HasColumnType("numeric");

                    b.Property<decimal>("CallVolume")
                        .HasColumnType("numeric");

                    b.Property<decimal>("OptionVolumeChange")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PutVolume")
                        .HasColumnType("numeric");

                    b.Property<string>("Ticker")
                        .HasColumnType("text");

                    b.Property<int>("TickerId")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalVolume")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("OptionActivities");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("OptionTracker.Models.Anal.VolumeAnal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Symbol")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("VolumeAnals");
                });

            modelBuilder.Entity("OptionTracker.Models.Anal.VolumeData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("OptionType")
                        .HasColumnType("integer");

                    b.Property<string>("Symbol")
                        .HasColumnType("text");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Volume")
                        .HasColumnType("integer");

                    b.Property<int?>("VolumeAnalId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("VolumeAnalId");

                    b.ToTable("VolumeDatas");
                });

            modelBuilder.Entity("OptionTracker.Models.Crypto.BookDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal?>("AskIv")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("BestAskAmount")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("BestAskPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("BestBidAmount")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("BestBidPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("BidIv")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("EstimatedDeliveryPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("IndexPrice")
                        .HasColumnType("numeric");

                    b.Property<int?>("InstrumentHistoryId")
                        .HasColumnType("integer");

                    b.Property<string>("InstrumentName")
                        .HasColumnType("text");

                    b.Property<decimal?>("InterestRate")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("LastPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MarkIv")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MarkPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MaxPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MinPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("OpenInterest")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("RequestTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("SettlementPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<long>("Timestamp")
                        .HasColumnType("bigint");

                    b.Property<string>("UnderlyingIndex")
                        .HasColumnType("text");

                    b.Property<decimal?>("UnderlyingPrice")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("InstrumentHistoryId");

                    b.ToTable("BookDetails");
                });

            modelBuilder.Entity("OptionTracker.Models.Crypto.Greeks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("BookDetailId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Delta")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Gamma")
                        .HasColumnType("numeric");

                    b.Property<string>("InstrumentName")
                        .HasColumnType("text");

                    b.Property<DateTime>("RequestTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("Rho")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Theta")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Vega")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("BookDetailId")
                        .IsUnique();

                    b.ToTable("Greeks");
                });

            modelBuilder.Entity("OptionTracker.Models.Crypto.InstrumentHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("ActualInstrumentId")
                        .HasColumnType("integer");

                    b.Property<string>("InstrumentName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ActualInstrumentId");

                    b.ToTable("InstrumentHistories");
                });

            modelBuilder.Entity("OptionTracker.Models.Crypto.Stats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("BookDetailId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("High")
                        .HasColumnType("numeric");

                    b.Property<string>("InstrumentName")
                        .HasColumnType("text");

                    b.Property<decimal?>("Low")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("PriceChange")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("RequestTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("Volume")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("BookDetailId")
                        .IsUnique();

                    b.ToTable("Stats");
                });

            modelBuilder.Entity("OptionTracker.Models.OptionChainRaw", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<JsonDocument>("Data")
                        .HasColumnType("jsonb");

                    b.Property<string>("Symbol")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OptionChainRaw");
                });

            modelBuilder.Entity("OptionTracker.Models.OptionContract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("Ask")
                        .HasColumnType("numeric");

                    b.Property<int>("AskSize")
                        .HasColumnType("integer");

                    b.Property<decimal>("Bid")
                        .HasColumnType("numeric");

                    b.Property<string>("BidAskSize")
                        .HasColumnType("text");

                    b.Property<int>("BidSize")
                        .HasColumnType("integer");

                    b.Property<decimal>("ClosePrice")
                        .HasColumnType("numeric");

                    b.Property<int>("DaysToExpiration")
                        .HasColumnType("integer");

                    b.Property<string>("DeliverableNote")
                        .HasColumnType("text");

                    b.Property<string>("Delta")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ExchangeName")
                        .HasColumnType("text");

                    b.Property<long>("ExpirationDate")
                        .HasColumnType("bigint");

                    b.Property<string>("ExpirationType")
                        .HasColumnType("text");

                    b.Property<string>("Gamma")
                        .HasColumnType("text");

                    b.Property<decimal>("HighPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("HistoricalOptionContractId")
                        .HasColumnType("integer");

                    b.Property<bool>("InTheMoney")
                        .HasColumnType("boolean");

                    b.Property<string>("IsIndexOption")
                        .HasColumnType("text");

                    b.Property<decimal>("Last")
                        .HasColumnType("numeric");

                    b.Property<string>("LastSize")
                        .HasColumnType("text");

                    b.Property<long>("LastTradingDay")
                        .HasColumnType("bigint");

                    b.Property<decimal>("LowPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Mark")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MarkChange")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MarkPercentChange")
                        .HasColumnType("numeric");

                    b.Property<bool>("Mini")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Multiplier")
                        .HasColumnType("numeric");

                    b.Property<decimal>("NetChange")
                        .HasColumnType("numeric");

                    b.Property<bool>("NonStandard")
                        .HasColumnType("boolean");

                    b.Property<int>("OpenInterest")
                        .HasColumnType("integer");

                    b.Property<decimal>("OpenPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("OptionDeliverablesList")
                        .HasColumnType("text");

                    b.Property<decimal>("PercentChange")
                        .HasColumnType("numeric");

                    b.Property<string>("PutCall")
                        .HasColumnType("text");

                    b.Property<long?>("QuoteTimeInLong")
                        .HasColumnType("bigint");

                    b.Property<string>("Rho")
                        .HasColumnType("text");

                    b.Property<string>("SettlementType")
                        .HasColumnType("text");

                    b.Property<decimal>("StrikePrice")
                        .HasColumnType("numeric");

                    b.Property<string>("Symbol")
                        .HasColumnType("text");

                    b.Property<string>("TheoreticalOptionValue")
                        .HasColumnType("text");

                    b.Property<string>("TheoreticalVolatility")
                        .HasColumnType("text");

                    b.Property<string>("Theta")
                        .HasColumnType("text");

                    b.Property<decimal>("TimeValue")
                        .HasColumnType("numeric");

                    b.Property<int>("TotalVolume")
                        .HasColumnType("integer");

                    b.Property<string>("TradeDate")
                        .HasColumnType("text");

                    b.Property<long?>("TradeTimeInLong")
                        .HasColumnType("bigint");

                    b.Property<string>("Vega")
                        .HasColumnType("text");

                    b.Property<string>("Volatility")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OptionContracts");
                });

            modelBuilder.Entity("OptionTracker.Models.Ticker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AssetType")
                        .HasColumnType("text");

                    b.Property<decimal>("ClosePrice")
                        .HasColumnType("numeric");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("LastOptionVolume")
                        .HasColumnType("integer");

                    b.Property<int>("MarketCap")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("NextEarnings")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("OptionVolumeChange")
                        .HasColumnType("numeric");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int?>("TraderId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TraderId");

                    b.ToTable("Ticker");
                });

            modelBuilder.Entity("OptionTracker.Models.TickerSymbol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AssetType")
                        .HasColumnType("text");

                    b.Property<decimal>("ClosePrice")
                        .HasColumnType("numeric");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("LastOptionVolume")
                        .HasColumnType("integer");

                    b.Property<int>("MarketCap")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<DateTime>("NextEarnings")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("OptionVolumeChange")
                        .HasColumnType("numeric");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("TickerSectorId")
                        .HasColumnType("integer");

                    b.Property<int>("TickerTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TickerSectorId");

                    b.HasIndex("TickerTypeId");

                    b.ToTable("TickerSymbols");
                });

            modelBuilder.Entity("OptionTracker.Models.Trader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("IdentityUserId")
                        .HasColumnType("text");

                    b.Property<int?>("TickerSymbolId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TickerSymbolId");

                    b.ToTable("Traders");
                });

            modelBuilder.Entity("Org.OpenAPITools.Models.BookSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal?>("AskPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("BaseCurrency")
                        .HasColumnType("text");

                    b.Property<decimal?>("BidPrice")
                        .HasColumnType("numeric");

                    b.Property<long?>("CreationTimestamp")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("CurrentFunding")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("EstimatedDeliveryPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Funding8h")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("High")
                        .HasColumnType("numeric");

                    b.Property<int?>("InstrumentHistoryId")
                        .HasColumnType("integer");

                    b.Property<string>("InstrumentName")
                        .HasColumnType("text");

                    b.Property<decimal?>("InterestRate")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Last")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Low")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MarkPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MidPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("OpenInterest")
                        .HasColumnType("numeric");

                    b.Property<string>("QuoteCurrency")
                        .HasColumnType("text");

                    b.Property<DateTime>("RequestTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UnderlyingIndex")
                        .HasColumnType("text");

                    b.Property<decimal?>("UnderlyingPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Volume")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("VolumeUsd")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("InstrumentHistoryId");

                    b.ToTable("BookSummaries");
                });

            modelBuilder.Entity("Org.OpenAPITools.Models.DailyBalance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("BalanceDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("PortfolioEthId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PortfolioEthId");

                    b.ToTable("DailyBalances");
                });

            modelBuilder.Entity("Org.OpenAPITools.Models.Instrument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("BaseCurrency")
                        .HasColumnType("integer");

                    b.Property<decimal?>("ContractSize")
                        .HasColumnType("numeric");

                    b.Property<long?>("CreationTimestamp")
                        .HasColumnType("bigint");

                    b.Property<long?>("ExpirationTimestamp")
                        .HasColumnType("bigint");

                    b.Property<string>("InstrumentName")
                        .HasColumnType("text");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int?>("Kind")
                        .HasColumnType("integer");

                    b.Property<decimal?>("MinTradeAmount")
                        .HasColumnType("numeric");

                    b.Property<int?>("OptionType")
                        .HasColumnType("integer");

                    b.Property<int?>("QuoteCurrency")
                        .HasColumnType("integer");

                    b.Property<int?>("SettlementPeriod")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Strike")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("TickSize")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Instruments");
                });

            modelBuilder.Entity("Org.OpenAPITools.Models.PortfolioEth", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal?>("AvailableFunds")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("AvailableWithdrawalFunds")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Balance")
                        .HasColumnType("numeric");

                    b.Property<int?>("Currency")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Equity")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("EquityUsd")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("InitialMargin")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MaintenanceMargin")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MarginBalance")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("PortfolioDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("creation_timestamp")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("delta_total")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("futures_pl")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("futures_session_rpl")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("futures_session_upl")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("options_delta")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("options_gamma")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("options_pl")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("options_session_rpl")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("options_session_upl")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("options_theta")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("options_value")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("options_vega")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("projected_delta_total")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("projected_initial_margin")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("projected_maintenance_margin")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("session_rpl")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("session_upl")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("total_pl")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("PortfoliosEth");
                });

            modelBuilder.Entity("Org.OpenAPITools.Models.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal?>("AveragePrice")
                        .IsRequired()
                        .HasColumnType("numeric");

                    b.Property<decimal?>("AveragePriceUsd")
                        .HasColumnType("numeric");

                    b.Property<int?>("DailyBalanceId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Delta")
                        .IsRequired()
                        .HasColumnType("numeric");

                    b.Property<int>("Direction")
                        .HasColumnType("integer");

                    b.Property<decimal?>("EstimatedLiquidationPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FloatingProfitLoss")
                        .IsRequired()
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FloatingProfitLossUsd")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("IndexPrice")
                        .IsRequired()
                        .HasColumnType("numeric");

                    b.Property<decimal?>("InitialMargin")
                        .IsRequired()
                        .HasColumnType("numeric");

                    b.Property<string>("InstrumentName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Kind")
                        .HasColumnType("integer");

                    b.Property<decimal?>("MaintenanceMargin")
                        .IsRequired()
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MarkPrice")
                        .IsRequired()
                        .HasColumnType("numeric");

                    b.Property<decimal?>("OpenOrdersMargin")
                        .IsRequired()
                        .HasColumnType("numeric");

                    b.Property<decimal?>("RealizedProfitLoss")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("SettlementPrice")
                        .IsRequired()
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Size")
                        .IsRequired()
                        .HasColumnType("numeric");

                    b.Property<decimal?>("SizeCurrency")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("TotalProfitLoss")
                        .IsRequired()
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("DailyBalanceId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OptionTracker.Models.Anal.VolumeData", b =>
                {
                    b.HasOne("OptionTracker.Models.Anal.VolumeAnal", null)
                        .WithMany("VolumeDatas")
                        .HasForeignKey("VolumeAnalId");
                });

            modelBuilder.Entity("OptionTracker.Models.Crypto.BookDetail", b =>
                {
                    b.HasOne("OptionTracker.Models.Crypto.InstrumentHistory", null)
                        .WithMany("BookDetails")
                        .HasForeignKey("InstrumentHistoryId");
                });

            modelBuilder.Entity("OptionTracker.Models.Crypto.Greeks", b =>
                {
                    b.HasOne("OptionTracker.Models.Crypto.BookDetail", null)
                        .WithOne("Greeks")
                        .HasForeignKey("OptionTracker.Models.Crypto.Greeks", "BookDetailId");
                });

            modelBuilder.Entity("OptionTracker.Models.Crypto.InstrumentHistory", b =>
                {
                    b.HasOne("Org.OpenAPITools.Models.Instrument", "ActualInstrument")
                        .WithMany()
                        .HasForeignKey("ActualInstrumentId");

                    b.Navigation("ActualInstrument");
                });

            modelBuilder.Entity("OptionTracker.Models.Crypto.Stats", b =>
                {
                    b.HasOne("OptionTracker.Models.Crypto.BookDetail", null)
                        .WithOne("Stats")
                        .HasForeignKey("OptionTracker.Models.Crypto.Stats", "BookDetailId");
                });

            modelBuilder.Entity("OptionTracker.Models.Ticker", b =>
                {
                    b.HasOne("OptionTracker.Models.Trader", null)
                        .WithMany("Tickers")
                        .HasForeignKey("TraderId");
                });

            modelBuilder.Entity("OptionTracker.Models.TickerSymbol", b =>
                {
                    b.HasOne("Core.Entities.TickerSector", "TickerSector")
                        .WithMany()
                        .HasForeignKey("TickerSectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.TickerType", "TickerType")
                        .WithMany()
                        .HasForeignKey("TickerTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TickerSector");

                    b.Navigation("TickerType");
                });

            modelBuilder.Entity("OptionTracker.Models.Trader", b =>
                {
                    b.HasOne("OptionTracker.Models.TickerSymbol", null)
                        .WithMany("Traders")
                        .HasForeignKey("TickerSymbolId");
                });

            modelBuilder.Entity("Org.OpenAPITools.Models.BookSummary", b =>
                {
                    b.HasOne("OptionTracker.Models.Crypto.InstrumentHistory", null)
                        .WithMany("BookSummaries")
                        .HasForeignKey("InstrumentHistoryId");
                });

            modelBuilder.Entity("Org.OpenAPITools.Models.DailyBalance", b =>
                {
                    b.HasOne("Org.OpenAPITools.Models.PortfolioEth", "PortfolioEth")
                        .WithMany()
                        .HasForeignKey("PortfolioEthId");

                    b.Navigation("PortfolioEth");
                });

            modelBuilder.Entity("Org.OpenAPITools.Models.Position", b =>
                {
                    b.HasOne("Org.OpenAPITools.Models.DailyBalance", null)
                        .WithMany("Positions")
                        .HasForeignKey("DailyBalanceId");
                });

            modelBuilder.Entity("OptionTracker.Models.Anal.VolumeAnal", b =>
                {
                    b.Navigation("VolumeDatas");
                });

            modelBuilder.Entity("OptionTracker.Models.Crypto.BookDetail", b =>
                {
                    b.Navigation("Greeks");

                    b.Navigation("Stats");
                });

            modelBuilder.Entity("OptionTracker.Models.Crypto.InstrumentHistory", b =>
                {
                    b.Navigation("BookDetails");

                    b.Navigation("BookSummaries");
                });

            modelBuilder.Entity("OptionTracker.Models.TickerSymbol", b =>
                {
                    b.Navigation("Traders");
                });

            modelBuilder.Entity("OptionTracker.Models.Trader", b =>
                {
                    b.Navigation("Tickers");
                });

            modelBuilder.Entity("Org.OpenAPITools.Models.DailyBalance", b =>
                {
                    b.Navigation("Positions");
                });
#pragma warning restore 612, 618
        }
    }
}
